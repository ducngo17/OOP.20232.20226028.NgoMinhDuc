10. If you create a constructor method to build a DVD by title then create a constructor method to build 
a DVD by category. Does JAVA allow you to do this? 

No
It's based on the concept of the overloading method. 
Method overloading allows different methods to have the same name but different signatures 
where the signature can differ by the number of input parameters or type of input parameter(s) or both. 
In this case, both constructors have the same data type of input parameter (String), and the numbers of input parameters are also both equal to 1. 
So, it does not satisfy the condition for overloading and you cannot create constructors like above.


//////////////
14.Try to add a method addDigitalVideoDisc which allows to pass an arbitrary 
number of arguments for dvd. Compared to an array parameter. What do you prefer 
in this case?

In my opinion, there is no significant difference when using array or varargs

///////////////
15. After the call of swap(jungleDVD, cinderellaDVD) why does the title of these two 
objects still remain?

When we call swap method with 2 arguments jungleDVD and cinderellaDVD, 
Java create 2 copies of 2 above arguments. Then, the parameters o1 and o2 take these 2 copies and perform the swap operation.
Meanwhile the 2 objects still remain the same.

After the call of changeTitle(jungleDVD, cinderellaDVD.getTitle()) why is 
the title of the JungleDVD changed? 

Firstly, objects in JAVA are references, which means that we have a DVD jungle object and the variable jungleDVD is the reference pointing to the object.
When we call changeTitle method with 2 arguments jungleDVD, and "cinderella", a copy of the reference pointing to jungleDVD object 
and a copy of "cinderella" string are created. The first line of the function, "jungle" (dvd.getTitle()) is assigned to oldTitle variable.
At the second line, method dvd.setTitle allows us to access to the real object pointed by the reference, which is the DVD jungle, and set the value of the title attribute
to "cinderella". Now, the title attribute of the DVD jungle has been changed successfully. The last line create a object by new method, then the reference copy now refers to this new object. 
So the original reference jungleDVD still refers to the DVD jungle object, which the title changes to "cinderella".

So we have dealt with 2 cases: passing an primitive data type and passing a reference data type. Both indicate that java is a pass-by-value language